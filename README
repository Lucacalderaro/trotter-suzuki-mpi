This is a distributed variant of efficient implementations of a simple Trotter-Suzuki solver. The kernels are based on:

https://bitbucket.org/zzzoom/trottersuzuki

CUDA and an MPI implementation are required for compiling.

A test example is included. Usage: trottertest [OPTION]. Arguments:
  -d NUMBER     Matrix dimension (default: 640)
  -i NUMBER     Number of iterations (default: 1000)
  -k NUMBER     Kernel type (default: 0): 
                   0: CPU, cache-optimized
                   1: CPU, SSE and cache-optimized
                   2: GPU
  -s NUMBER     Snapshots are taken at every NUMBER of iterations.
                Zero means no snapshots. Default: 0.

Usage example:

mpirun -np 2 build/trottertest -k 0 -i 100 -d 640 -s 10

The chunk of the matrix assigned to a node, that is a tile, must have a width that is divisible by two. This puts a constraint on the possible matrix sizes. For instance, running twelve MPI threads in a 4x3 configuration, the dimensions must be divisible by six and eight.

The included shell script single2double.sh generates a double precision variant. Executing it will overwrite the single precision source code.

MPI extensions (c) 2012 by Peter Wittek <peterwittek@acm.org>
Kernel implementations (c) 2010-2012 by Carlos Bederi√°n <bc@famaf.unc.edu.ar>
